---
title: "ETH 2025 Seedling Distribution"
format: 
  dashboard:
    orientation: rows
    theme: cosmo
server: shiny
---

```{r}
#| context: setup

# ---- Load Libraries ----
library(shiny)
library(tidyverse)
library(googlesheets4)
library(janitor)
library(DT)
library(plotly)
library(scales)
library(bslib)

# ---- App Configuration ----
sheet_url <- "https://docs.google.com/spreadsheets/d/1VHn2zFbGbpmB-inzJZUeNfrTwEJ--pBB5MjRmxPAVT0/edit?gid=15730184#gid=15730184"
tree_types <- c("gesho", "grevillea", "decurrens", "wanza", "papaya", "moringa", "coffee", "guava", "lemon")
primary_green   <- "#2E7D32"
accent_orange   <- "#FF8F00"

# ---- Data Loading and Processing ----
# Read and process data from Google Sheets
# Using clean_names() to standardize column names
all_data <- reactive({
  df_raw <- googlesheets4::read_sheet(sheet_url, sheet = "Farmer Detail")
  df <- df_raw %>% 
    janitor::clean_names() %>%
    mutate(phone_number_dummy = paste0("555-", sample(1000:9999, nrow(.), replace = TRUE))) %>%
    select(-any_of(c("full_name", "phone_number")))
  df
})

# ---- Reactive Filters ----
# Reactive expression for filtered data
filtered_data <- reactive({
  df <- all_data()
  
  # Apply purpose filter
  if (!is.null(input$purpose) && input$purpose != "All") {
    df <- df %>% filter(purpose == input$purpose)
  }
  
  # Apply cluster filter
  if (!is.null(input$cluster) && input$cluster != "All") {
    df <- df %>% filter(cluster == input.cluster)
  }
  
  # Apply woreda filter
  if (!is.null(input$woreda) && input$woreda != "All") {
    df <- df %>% filter(woreda == input$woreda)
  }
  
  df
})

```

## Row {height=15%}

```{r}
#| component: valuebox
#| title: "Total Farmers"
renderValueBox({
  d <- filtered_data()
  value_box(
    title = "Total Farmers",
    value = prettyNum(nrow(d), big.mark = ","),
    showcase = icon("users"),
    theme = "primary"
  )
})
```

```{r}
#| component: valuebox
#| title: "Total Seedlings"
renderValueBox({
  d <- filtered_data()
  value_box(
    title = "Total Seedlings",
    value = prettyNum(sum(d$total_seedling, na.rm = TRUE), big.mark = ","),
    showcase = icon("seedling"),
    theme = "secondary"
  )
})
```

```{r}
#| component: valuebox
#| title: "Avg. Seedlings / Farmer"
renderValueBox({
  d <- filtered_data()
  value_box(
    title = "Avg. Seedlings / Farmer",
    value = round(mean(d$total_seedling, na.rm = TRUE), 1),
    showcase = icon("chart-line"),
    theme = "info"
  )
})
```

```{r}
#| component: valuebox
#| title: "Phone Ownership"
renderValueBox({
  d <- filtered_data()
  value_box(
    title = "Phone Ownership",
    value = paste0(round(mean(d$has_phone, na.rm = TRUE) * 100, 1), "%"),
    showcase = icon("mobile-alt"),
    theme = "warning"
  )
})
```

## Row {height=85%}

### Column {width=30%}

```{r}
#| component: card
#| title: "Filters"
# Dynamic filter for Purpose
uiOutput("purpose_filter")

# Dynamic filter for Cluster
uiOutput("cluster_filter")

# Dynamic filter for Woreda
uiOutput("woreda_filter")

# Render UI for purpose filter
output$purpose_filter <- renderUI({
  df <- all_data()
  purposes <- c("All", unique(df$purpose))
  selectInput("purpose", "Purpose:", choices = purposes, selected = "All")
})

# Render UI for cluster filter
output$cluster_filter <- renderUI({
  df <- all_data()
  clusters <- c("All", unique(df$cluster))
  selectInput("cluster", "Cluster:", choices = clusters, selected = "All")
})

# Render UI for woreda filter
output$woreda_filter <- renderUI({
  df <- all_data()
  woredas <- c("All", unique(df$woreda))
  selectInput("woreda", "Woreda:", choices = woredas, selected = "All")
})
```

### Column {width=70%}

```{r}
#| component: card
#| title: "Tree Species Distribution"
renderPlotly({
  df <- filtered_data() %>%
    select(all_of(tree_types)) %>%
    pivot_longer(cols = everything(), names_to = "tree_type", values_to = "count") %>%
    group_by(tree_type) %>%
    summarise(total_count = sum(count, na.rm = TRUE), .groups = 'drop') %>%
    filter(total_count > 0)
  
  plot_ly(df, labels = ~str_to_title(tree_type), values = ~total_count, 
          type = 'pie', hole = 0.4,
          textinfo = 'label+percent',
          marker = list(colors = RColorBrewer::brewer.pal(nrow(df), "Set2"))) %>%
    layout(showlegend = TRUE, title = "")
})
```

```{r}
#| component: card
#| title: "Purpose Analysis"
renderPlotly({
  df <- filtered_data() %>%
    group_by(purpose) %>%
    summarise(farmers = n(), .groups = 'drop') %>%
    filter(!is.na(purpose))

  plot_ly(df, x = ~purpose, y = ~farmers, color = ~purpose,
          type = 'bar', text = ~farmers, textposition = 'auto') %>%
    layout(
      yaxis = list(title = "Number of Farmers"),
      xaxis = list(title = "Purpose"),
      showlegend = FALSE
    )
})
```
