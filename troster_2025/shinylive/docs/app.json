[{"name":"app.R","content":"# ShinyLive App for Tree Planting Survey Data\n# Enhanced version with improved data loading, error handling, and performance\n# This app visualizes key indicators from the ETH 2025 Decurrence Tree Value Survey\n\n# ---- Load Libraries ----\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(googlesheets4)\nlibrary(janitor)\nlibrary(DT)\nlibrary(plotly)\nlibrary(scales)\nlibrary(shinycssloaders)\nlibrary(bslib)\nlibrary(promises)\nlibrary(future)\n\nplan(multisession)\n\n# ---- App Configuration ----\nsheet_url <- \"https://docs.google.com/spreadsheets/d/1VHn2zFbGbpmB-inzJZUeNfrTwEJ--pBB5MjRmxPAVT0/edit?gid=15730184#gid=15730184\"\nsheet_name <- \"Farmer Detail\"\ntree_types <- c(\"gesho\", \"grevillea\", \"decurrens\", \"wanza\", \"papaya\", \"moringa\", \"coffee\", \"guava\", \"lemon\")\n\n# ---- Color Palette ----\nprimary_green   <- \"#2E7D32\"\nsecondary_green <- \"#4CAF50\"\nlight_green     <- \"#E8F5E8\"\naccent_orange   <- \"#FF8F00\"\naccent_blue   <- \"#1976D2\"\naccent_purple   <- \"#7B1FA2\"\nwarm_red        <- \"#D32F2F\"\nnature_colors   <- c(\"#2E7D32\", \"#4CAF50\", \"#FF8F00\", \"#1976D2\", \"#7B1FA2\", \"#D32F2F\", \"#795548\", \"#607D8B\", \"#FF5722\", \"#009688\")\nnature_colors_extended <- c(nature_colors, \"#FFC107\", \"#00BCD4\", \"#8BC34A\", \"#E91E63\", \"#9C27B0\", \"#3F51B5\", \"#CDDC39\", \"#FFEB3B\", \"#FF9800\", \"#F44336\")\n\n# ---- Data Loading Functions ----\nlocal_data_path <- file.path(\"data\", \"farmer_data.rds\")\n\n# Helper: process raw Google Sheet data\nprocess_sheet_data <- function(df) {\n  df <- df %>%\n    janitor::clean_names() %>%\n    dplyr::select(cluster, woreda, kebele, purpose_for_taking_t_seedling_check_one, name_of_farmer, sex_m_f, age, male_youth_16_35_yrs, female_youth_16_35_yrs, is_this_a_repeat_customer_yes_no, total_of_gesho_seedlings, gesho_price, grevillea_price, total_of_grevillea_seedlings, total_of_decurrens_seedlings, decurrens_price, total_of_wanza_seedlings, wanza_price, total_of_papaya_seedlings, papaya_price, total_of_moringa_seedlings, moringa_price, total_of_coffee_seedlings, coffee_price, total_of_guava_seedlings, guava_price, total_of_lmon_seedlings, lemon_price, mobile_number_if_any, female_youth_16_35_yrs_2) %>%\n    dplyr::rename(\n      purpose = purpose_for_taking_t_seedling_check_one,\n      repeat_customer = is_this_a_repeat_customer_yes_no,\n      gesho = total_of_gesho_seedlings,\n      grevillea = total_of_grevillea_seedlings,\n      decurrens = total_of_decurrens_seedlings,\n      wanza = total_of_wanza_seedlings,\n      papaya = total_of_papaya_seedlings,\n      moringa = total_of_moringa_seedlings,\n      coffee = total_of_coffee_seedlings,\n      guava = total_of_guava_seedlings,\n      lemon = total_of_lmon_seedlings,\n      mobile_number = mobile_number_if_any,\n      sex = sex_m_f\n    ) %>%\n    dplyr::mutate(\n      # Create a dummy farmer_id (random string)\n      farmer_id = paste0(\"F\", sprintf(\"%06d\", sample(1e6:9e6, n(), replace = FALSE))),\n      total_seedling = gesho + grevillea + decurrens + wanza + papaya + moringa + coffee + guava + lemon,\n      has_phone = !is.na(mobile_number) & mobile_number != \"\",\n      age_group = dplyr::case_when(\n        age < 25 ~ \"Under 25\",\n        age >= 25 & age < 35 ~ \"25-34\",\n        age >= 35 & age < 45 ~ \"35-44\",\n        age >= 45 & age < 55 ~ \"45-54\",\n        age >= 55 ~ \"55+\",\n        TRUE ~ \"Unknown\"\n      ),\n      total_revenue = (gesho * gesho_price) + (grevillea * grevillea_price) + \n                      (decurrens * decurrens_price) + (wanza * wanza_price) + \n                      (papaya * papaya_price) + (moringa * moringa_price) + \n                      (coffee * coffee_price) + (guava * guava_price) + \n                      (lemon * lemon_price)\n    )\n  # Remove phone number and name before saving\n  df <- df %>% select(-mobile_number, -name_of_farmer)\n  expected_cols <- c(\"cluster\", \"woreda\", \"kebele\", \"purpose\", \"sex\", \"age\", \"male_youth_16_35_yrs\", \"female_youth_16_35_yrs\", \"repeat_customer\", \"gesho\", \"gesho_price\", \"grevillea\", \"grevillea_price\", \"decurrens\", \"decurrens_price\", \"wanza\", \"wanza_price\", \"papaya\", \"papaya_price\", \"moringa\", \"moringa_price\", \"coffee\", \"coffee_price\", \"guava\", \"guava_price\", \"lemon\", \"lemon_price\", \"female_youth_16_35_yrs_2\", \"total_seedling\", \"has_phone\", \"age_group\", \"total_revenue\", \"farmer_id\")\n  missing_cols <- setdiff(expected_cols, names(df))\n  attr(df, \"missing_columns\") <- missing_cols\n  df\n}\n\n# Main data loader: load from local file if exists, else fetch and save\nload_data <- function() {\n  tryCatch({\n    if (file.exists(local_data_path)) {\n      df <- readRDS(local_data_path)\n    } else {\n      df_raw <- googlesheets4::read_sheet(sheet_url, sheet = sheet_name)\n      df <- process_sheet_data(df_raw)\n      saveRDS(df, local_data_path)\n    }\n    df\n  }, error = function(e) {\n    structure(list(message = paste(\"Data load failed:\", e$message)), class = \"data_load_error\")\n  })\n}\n\n# Helper: force refresh from Google Sheets and overwrite local file\nrefresh_data_from_gsheets <- function() {\n  tryCatch({\n    df_raw <- googlesheets4::read_sheet(sheet_url, sheet = sheet_name)\n    df <- process_sheet_data(df_raw)\n    saveRDS(df, local_data_path)\n    df\n  }, error = function(e) {\n    structure(list(message = paste(\"Data refresh failed:\", e$message)), class = \"data_load_error\")\n  })\n}\n\n# ---- Helper function for empty plots ----\nplotly_empty <- function(message = \"No data available for the selected filters.\") {\n  plotly::plot_ly() %>%\n    plotly::layout(\n      xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),\n      yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),\n      annotations = list(\n        x = 0.5, y = 0.5, text = message, xref = \"paper\", yref = \"paper\",\n        showarrow = FALSE, font = list(size = 14, color = \"#6C757D\")\n      ),\n      paper_bgcolor = 'rgba(0,0,0,0)',\n      plot_bgcolor = 'rgba(0,0,0,0)'\n    )\n}\n\n# ---- UI Definition ----\nui <- fluidPage(\n  theme = bs_theme(\n    version = 5, bg = \"#FFFFFF\", fg = \"#2C3E50\", primary = \"#2E7D32\",\n    secondary = \"#4CAF50\", success = \"#4CAF50\", info = \"#1976D2\",\n    warning = \"#FF8F00\", danger = \"#D32F2F\", base_font = font_google(\"Inter\"),\n    heading_font = font_google(\"Poppins\"), code_font = font_google(\"JetBrains Mono\")\n  ),\n  \n  tags$head(\n    tags$link(rel = \"stylesheet\", href = \"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css\"),\n    tags$style(HTML('\\\n      body { background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%); font-family: \"Inter\", sans-serif; line-height: 1.6; }\\\n      .main-header { background: linear-gradient(135deg, #2E7D32 0%, #4CAF50 100%); color: white; padding: 25px 0; margin-bottom: 30px; border-radius: 0 0 20px 20px; box-shadow: 0 8px 32px rgba(46, 125, 50, 0.3); }\\\n      .header-content { display: flex; align-items: center; justify-content: center; gap: 20px; }\\\n      .header-icon { font-size: 3rem; color: #E8F5E8; text-shadow: 2px 2px 4px rgba(0,0,0,0.3); }\\\n      .header-title { font-family: \"Poppins\", sans-serif; font-size: 2.5rem; font-weight: 700; margin: 0; text-shadow: 2px 2px 4px rgba(0,0,0,0.3); }\\\n      .header-subtitle { font-size: 1.1rem; opacity: 0.9; margin-top: 5px; font-weight: 300; }\\\n      .sidebar-panel { background: white; border-radius: 15px; box-shadow: 0 4px 20px rgba(0,0,0,0.1); padding: 0; border: none; }\\\n      .filter-section { background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); padding: 20px; border-radius: 15px 15px 0 0; border-bottom: 3px solid #2E7D32; }\\\n      .filter-title { color: #2E7D32; font-weight: 600; margin-bottom: 15px; display: flex; align-items: center; gap: 10px; }\\\n      .options-section { padding: 20px; }\\\n      .value-box { background: white; border-radius: 15px; padding: 25px 20px; text-align: center; box-shadow: 0 4px 20px rgba(0,0,0,0.1); border: none; transition: all 0.3s ease; position: relative; overflow: hidden; }\\\n      .value-box:hover { transform: translateY(-5px); box-shadow: 0 8px 30px rgba(0,0,0,0.15); }\\\n      .value-box::before { content: \"\"; position: absolute; top: 0; left: 0; right: 0; height: 4px; background: linear-gradient(90deg, #2E7D32, #4CAF50); }\\\n      .value-box-icon { font-size: 2.5rem; margin-bottom: 15px; opacity: 0.8; }\\\n      .value-box-value { font-size: 2.2rem; font-weight: 700; color: #2C3E50; margin-bottom: 8px; }\\\n      .value-box-subtitle { color: #6C757D; font-size: 0.95rem; font-weight: 500; text-transform: uppercase; letter-spacing: 0.5px; }\\\n      .chart-container { background: white; border-radius: 15px; padding: 25px; margin-bottom: 25px; box-shadow: 0 4px 20px rgba(0,0,0,0.1); border: 1px solid #f0f0f0; }\\\n      .chart-title { color: #2C3E50; font-weight: 600; margin-bottom: 20px; padding-bottom: 10px; border-bottom: 2px solid #f0f0f0; display: flex; align-items: center; gap: 10px; }\\\n      .chart-icon { color: #4CAF50; font-size: 1.2rem; }\\\n      .nav-tabs .nav-link.active { background: linear-gradient(135deg, #2E7D32 0%, #4CAF50 100%); color: white; border: none; }\\\n      .loading-message { text-align: center; padding: 50px; color: #6C757D; }\\\n      .error-container { background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 10px; padding: 20px; margin: 20px; }\\\n      .refresh-btn { margin: 10px; }\\\n    '))\n  ),\n  \n  # Page Header\n  div(class = \"main-header\",\n    div(class = \"container-fluid\",\n      div(class = \"header-content\",\n        tags$i(class = \"fas fa-seedling header-icon\"),\n        div(\n          h1(class = \"header-title\", \"ETH 2025 Seedling Distribution Dashboard\")\n        )\n      )\n    )\n  ),\n  \n  # Main Content\n  div(class = \"container-fluid\",\n    # Loading/Error/Success UI\n    conditionalPanel(\n      condition = \"output.data_status == 'loading'\",\n      div(class = \"loading-message\",\n          withSpinner(\n            div(\n              h4(\"Loading Data...\"),\n              p(\"Please wait while we fetch the latest data from Google Sheets.\")\n            ),\n            type = 4, color = primary_green\n          )\n      )\n    ),\n    conditionalPanel(\n      condition = \"output.data_status == 'error'\",\n      div(class = \"error-container\",\n          h4(style = \"color: #D32F2F;\", \n             tags$i(class = \"fas fa-exclamation-triangle\", title = \"Error icon\"), \n             \" Data Loading Error\"),\n          verbatimTextOutput(\"error_details\"),\n          actionButton(\"retry_load\", \"Retry Loading Data\", \n                      class = \"btn btn-primary refresh-btn\",\n                      icon = icon(\"refresh\"),\n                      title = \"Try loading the data again\")\n      )\n    ),\n    conditionalPanel(\n      condition = \"output.data_status == 'success'\",\n      # Main dashboard UI\n      sidebarLayout(\n        sidebarPanel(\n          width = 3, class = \"sidebar-panel\",\n          div(class = \"filter-section\",\n            h4(class = \"filter-title\", tags$i(class = \"fas fa-filter\", title = \"Filter icon\"), \"Data Filters\"),\n            uiOutput(\"purpose_filter\"),\n            uiOutput(\"cluster_filter\"),\n            uiOutput(\"woreda_filter\"),\n            actionButton(\"refresh_data\", \"Refresh Data\", \n                        class = \"btn btn-outline-primary btn-sm refresh-btn\",\n                        icon = icon(\"refresh\"),\n                        title = \"Reload the latest data from Google Sheets\")\n          ),\n          div(class = \"options-section\",\n            h4(class = \"filter-title\", tags$i(class = \"fas fa-cog\", title = \"Settings icon\"), \"Display Options\"),\n            checkboxInput(\"show_percentages\", \"Show Percentages in Charts\", value = TRUE),\n            hr(),\n            h5(\"Data Info:\"),\n            verbatimTextOutput(\"data_info\", placeholder = TRUE),\n            textOutput(\"last_refresh\")\n          )\n        ),\n        mainPanel(\n          width = 9,\n          tabsetPanel(\n            id = \"main_tabs\", type = \"tabs\",\n            # Overview Tab\n            tabPanel(title = tagList(tags$i(class = \"fas fa-chart-pie\", title = \"Overview of all data\"), \"Overview\"), value = \"overview\",\n              fluidRow(\n                column(3, div(class = \"value-box\", \n                             tags$i(class = \"fas fa-users value-box-icon\", title = \"Total number of farmers\"), \n                             div(class = \"value-box-value\", textOutput(\"total_farmers\")), \n                             div(class = \"value-box-subtitle\", \"Total Farmers\"))),\n                column(3, div(class = \"value-box\", \n                             tags$i(class = \"fas fa-seedling value-box-icon\", title = \"Total seedlings distributed\"), \n                             div(class = \"value-box-value\", textOutput(\"total_seedlings\")), \n                             div(class = \"value-box-subtitle\", \"Total Seedlings\"))),\n                column(3, div(class = \"value-box\", \n                             tags$i(class = \"fas fa-chart-line value-box-icon\", title = \"Average seedlings per farmer\"), \n                             div(class = \"value-box-value\", textOutput(\"avg_seedlings\")), \n                             div(class = \"value-box-subtitle\", \"Avg. per Farmer\"))),\n                column(3, div(class = \"value-box\", \n                             tags$i(class = \"fas fa-mobile-alt value-box-icon\", title = \"Percentage of farmers with phones\"), \n                             div(class = \"value-box-value\", textOutput(\"phone_ownership\")), \n                             div(class = \"value-box-subtitle\", \"Have Phones\")))\n              ),\n              fluidRow(\n                column(6, div(class = \"chart-container\", \n                             h4(class = \"chart-title\", tags$i(class = \"chart-icon fas fa-chart-pie\", title = \"Tree species distribution\"), \"Tree Species Distribution\"), \n                             withSpinner(plotlyOutput(\"donut_plot\"), type = 4, color = accent_blue))),\n                column(6, div(class = \"chart-container\", \n                             h4(class = \"chart-title\", tags$i(class = \"chart-icon fas fa-bullseye\", title = \"Purpose analysis\"), \"Purpose Analysis\"), \n                             withSpinner(plotlyOutput(\"purpose_plot\"), type = 4, color = accent_blue)))\n              )\n            ),\n            tabPanel(title = tagList(tags$i(class = \"fas fa-globe-africa\", title = \"Geographic Analysis\"), \"Geographic\"),\n                     fluidRow(\n                       column(6, div(class = \"chart-container\",\n                                    h4(class = \"chart-title\", tags$i(class = \"chart-icon fas fa-users\", title = \"Farmers per cluster\"), \"Farmers per Cluster\"),\n                                    withSpinner(plotlyOutput(\"cluster_farmers\"), type = 4, color = accent_blue))),\n                       column(6, div(class = \"chart-container\",\n                                    h4(class = \"chart-title\", tags$i(class = \"chart-icon fas fa-seedling\", title = \"Seedlings per cluster\"), \"Average Seedlings per Cluster\"),\n                                    withSpinner(plotlyOutput(\"cluster_seedlings\"), type = 4, color = accent_blue)))\n                     ),\n                     fluidRow(\n                       column(12, div(class = \"chart-container\",\n                                     h4(class = \"chart-title\", tags$i(class = \"chart-icon fas fa-map-marked-alt\", title = \"Farmers per woreda\"), \"Farmers per Woreda\"),\n                                     withSpinner(plotlyOutput(\"woreda_plot\"), type = 4, color = accent_blue)))\n                     )\n            ),\n            tabPanel(title = tagList(tags$i(class = \"fas fa-user-friends\", title = \"Demographics\"), \"Demographics\"),\n                     fluidRow(\n                       column(6, div(class = \"chart-container\",\n                                    h4(class = \"chart-title\", tags$i(class = \"chart-icon fas fa-birthday-cake\", title = \"Age distribution\"), \"Age Distribution\"),\n                                    withSpinner(plotlyOutput(\"age_plot\"), type = 4, color = accent_blue))),\n                       column(6, div(class = \"chart-container\",\n                                    h4(class = \"chart-title\", tags$i(class = \"chart-icon fas fa-venus-mars\", title = \"Gender distribution\"), \"Gender Distribution\"),\n                                    withSpinner(plotlyOutput(\"gender_plot\"), type = 4, color = accent_blue)))\n                     ),\n                     fluidRow(\n                       column(6, div(class = \"chart-container\",\n                                    h4(class = \"chart-title\", tags$i(class = \"chart-icon fas fa-redo-alt\", title = \"Repeat customers\"), \"Repeat Customers\"),\n                                    withSpinner(plotlyOutput(\"repeat_plot\"), type = 4, color = accent_blue))),\n                       column(6, div(class = \"chart-container\",\n                                    h4(class = \"chart-title\", tags$i(class = \"chart-icon fas fa-child\", title = \"Youth participation\"), \"Youth Participation\"),\n                                    withSpinner(plotlyOutput(\"youth_plot\"), type = 4, color = accent_blue)))\n                     )\n            ),\n            tabPanel(title = tagList(tags$i(class = \"fas fa-tree\", title = \"Tree Analysis\"), \"Trees\"),\n                     fluidRow(\n                       column(12, div(class = \"chart-container\",\n                                     h4(class = \"chart-title\", tags$i(class = \"chart-icon fas fa-th\", title = \"Tree species per cluster\"), \"Tree Species per Cluster (Heatmap)\"),\n                                     withSpinner(plotlyOutput(\"tree_cluster_heatmap\"), type = 4, color = accent_blue)))\n                     ),\n                     fluidRow(\n                       column(12, div(class = \"chart-container\",\n                                     h4(class = \"chart-title\", tags$i(class = \"chart-icon fas fa-table\", title = \"Tree statistics\"), \"Tree Statistics\"),\n                                     withSpinner(DT::dataTableOutput(\"tree_stats_table\"), type = 4, color = accent_blue)))\n                     )\n            ),\n            tabPanel(title = tagList(tags$i(class = \"fas fa-mobile-alt\", title = \"Phone Ownership\"), \"Phone Data\"),\n                     fluidRow(\n                       column(6, div(class = \"chart-container\",\n                                    h4(class = \"chart-title\", tags$i(class = \"chart-icon fas fa-percent\", title = \"Phone ownership per tree species\"), \"Phone Ownership by Tree Species\"),\n                                    withSpinner(plotlyOutput(\"phone_tree_species\"), type = 4, color = accent_blue))),\n                       column(6, div(class = \"chart-container\",\n                                    h4(class = \"chart-title\", tags$i(class = \"chart-icon fas fa-table\", title = \"Tree species for phone owners\"), \"Tree Species for Phone Owners\"),\n                                    withSpinner(DT::dataTableOutput(\"phone_owners_species_table\"), type = 4, color = accent_blue)))\n                     ),\n                     fluidRow(\n                       column(6, div(class = \"chart-container\",\n                                    h4(class = \"chart-title\", tags$i(class = \"chart-icon fas fa-table\", title = \"Phone ownership by woreda\"), \"Phone Ownership by Woreda\"),\n                                    withSpinner(DT::dataTableOutput(\"phone_stats_table\"), type = 4, color = accent_blue))),\n                       column(6, div(class = \"chart-container\",\n                                    h4(class = \"chart-title\", tags$i(class = \"chart-icon fas fa-table\", title = \"Avg. Seedlings per Farmer by Phone Ownership\"), \"Avg. Seedlings per Farmer by Phone Ownership\"),\n                                    withSpinner(DT::dataTableOutput(\"phone_avg_seedlings_table\"), type = 4, color = accent_blue)))\n                     )\n            )\n          )\n        )\n      )\n    )\n  )\n)\n\n# ---- Server Definition ----\nserver <- function(input, output, session) {\n  # Reactive values to store data and state\n  values <- reactiveValues(\n    data = NULL,\n    data_status = \"loading\", # \"loading\", \"success\", \"error\"\n    error_message = NULL,\n    last_update = Sys.time()\n  )\n  \n  # ---- Data Loading ----\n  load_data_reactive <- function() {\n    values$data_status <- \"loading\"\n    \n    future_promise({\n      load_data()\n    }) %...>% (function(result) {\n      if (inherits(result, \"data_load_error\")) {\n        values$data_status <- \"error\"\n        values$error_message <- result$message\n        values$data <- NULL\n      } else {\n        values$data_status <- \"success\"\n        values$data <- result\n        values$error_message <- NULL\n        values$last_update <- Sys.time()\n      }\n    }) %...!% (function(error) {\n      values$data_status <- \"error\"\n      values$error_message <- paste(\"Unexpected error:\", error$message)\n      values$data <- NULL\n    })\n  }\n\n  # Add a separate refresh function to force update from Google Sheets\n  refresh_data_reactive <- function() {\n    values$data_status <- \"loading\"\n    future_promise({\n      refresh_data_from_gsheets()\n    }) %...>% (function(result) {\n      if (inherits(result, \"data_load_error\")) {\n        values$data_status <- \"error\"\n        values$error_message <- result$message\n        values$data <- NULL\n      } else {\n        values$data_status <- \"success\"\n        values$data <- result\n        values$error_message <- NULL\n        values$last_update <- Sys.time()\n      }\n    }) %...!% (function(error) {\n      values$data_status <- \"error\"\n      values$error_message <- paste(\"Unexpected error:\", error$message)\n      values$data <- NULL\n    })\n  }\n  \n  # Load data on startup\n  observe({\n    load_data_reactive()\n  })\n  \n  # Retry button\n  observeEvent(input$retry_load, {\n    load_data_reactive()\n  })\n  \n  # Refresh button\n  observeEvent(input$refresh_data, {\n    refresh_data_reactive()\n  })\n  \n  # Data status output\n  output$data_status <- reactive({\n    values$data_status\n  })\n  outputOptions(output, \"data_status\", suspendWhenHidden = FALSE)\n  \n  # Error details output\n  output$error_details <- renderText({\n    if (!is.null(values$error_message)) {\n      values$error_message\n    } else {\n      \"Unknown error occurred.\"\n    }\n  })\n  \n  # Dynamic filter inputs\n  output$purpose_filter <- renderUI({\n    if (values$data_status == \"success\" && !is.null(values$data)) {\n      purposes <- unique(values$data$purpose)\n      purposes <- purposes[!is.na(purposes)]\n      selectInput(\"purpose\", \"Purpose:\", \n                 choices = c(\"All\", purposes), \n                 selected = \"All\")\n    }\n  })\n  \n  output$cluster_filter <- renderUI({\n    if (values$data_status == \"success\" && !is.null(values$data)) {\n      clusters <- unique(values$data$cluster)\n      clusters <- clusters[!is.na(clusters)]\n      selectInput(\"cluster\", \"Cluster:\", \n                 choices = c(\"All\", clusters), \n                 selected = \"All\")\n    }\n  })\n\n  output$woreda_filter <- renderUI({\n    if (values$data_status == \"success\" && !is.null(values$data)) {\n      woredas <- unique(values$data$woreda)\n      woredas <- woredas[!is.na(woredas)]\n      selectInput(\"woreda\", \"Woreda:\", \n                 choices = c(\"All\", woredas), \n                 selected = \"All\")\n    }\n  })\n  \n  # Data info output\n  output$data_info <- renderText({\n    if (values$data_status == \"success\" && !is.null(values$data)) {\n      paste(\n        \"Rows:\", nrow(values$data),\n        \"\\nLast Updated:\", format(values$last_update, \"%Y-%m-%d %H:%M\"),\n        \"\\nMissing Columns:\", paste(attr(values$data, \"missing_columns\"), collapse = \", \")\n      )\n    }\n  })\n  \n  # Reactive filtered data\n  filtered_df <- reactive({\n    req(values$data_status == \"success\", values$data)\n    data <- values$data\n    if (!is.null(input$purpose) && input$purpose != \"All\") {\n      data <- data %>% filter(purpose == input$purpose)\n    }\n    if (!is.null(input$cluster) && input$cluster != \"All\") {\n      data <- data %>% filter(cluster == input$cluster)\n    }\n    if (!is.null(input$woreda) && input$woreda != \"All\") {\n      data <- data %>% filter(woreda == input$woreda)\n    }\n    return(data)\n  })\n  \n  # ---- Value Box Outputs ----\n  output$total_farmers <- renderText({\n    req(filtered_df())\n    prettyNum(nrow(filtered_df()), big.mark = \",\")\n  })\n  \n  output$total_seedlings <- renderText({\n    req(filtered_df())\n    prettyNum(sum(filtered_df()$total_seedling, na.rm = TRUE), big.mark = \",\")\n  })\n  \n  output$avg_seedlings <- renderText({\n    req(filtered_df())\n    round(mean(filtered_df()$total_seedling, na.rm = TRUE), 1)\n  })\n  \n  output$phone_ownership <- renderText({\n    req(filtered_df())\n    paste0(round(mean(filtered_df()$has_phone, na.rm = TRUE) * 100, 1), \"%\")\n  })\n  \n  # ---- Plot Outputs ----\n  \n  # Donut Plot\n  output$donut_plot <- renderPlotly({\n    validate(need(filtered_df(), \"No data loaded.\"))\n    df <- filtered_df() %>%\n      select(all_of(tree_types)) %>%\n      pivot_longer(cols = everything(), names_to = \"tree_type\", values_to = \"count\") %>%\n      group_by(tree_type) %>%\n      summarise(total_count = sum(count, na.rm = TRUE), .groups = 'drop') %>%\n      filter(total_count > 0)\n    validate(need(nrow(df) > 0, \"No tree data available for selected filters.\"))\n    plot_ly(df, labels = ~str_to_title(tree_type), values = ~total_count, \n            type = 'pie', hole = 0.4,\n            textinfo = if(isTRUE(input$show_percentages)) 'label+percent' else 'label+value',\n            marker = list(colors = nature_colors_extended[1:nrow(df)])) %>%\n      layout(showlegend = TRUE, \n             title = list(text = \"\", font = list(size = 14)))\n  })\n  \n  # Purpose Plot\n  output$purpose_plot <- renderPlotly({\n    req(filtered_df())\n    df <- filtered_df() %>%\n      group_by(purpose) %>%\n      summarise(farmers = n(), seedlings = sum(total_seedling, na.rm = TRUE), .groups = 'drop') %>%\n      filter(!is.na(purpose))\n    total_farmers <- sum(df$farmers)\n    total_seedlings <- sum(df$seedlings)\n    df_long <- df %>%\n      mutate(\n        farmers_pct = 100 * farmers / total_farmers,\n        seedlings_pct = 100 * seedlings / total_seedlings\n      ) %>%\n      select(purpose, farmers_pct, seedlings_pct) %>%\n      pivot_longer(cols = c(farmers_pct, seedlings_pct), names_to = \"type\", values_to = \"percent\") %>%\n      mutate(type = recode(type, farmers_pct = \"% of Farmers\", seedlings_pct = \"% of Seedlings\"))\n    if (nrow(df_long) == 0) {\n      return(plotly_empty(\"No purpose data available.\"))\n    }\n    plot_ly(df_long, x = ~purpose, y = ~percent, color = ~type, colors = c(primary_green, accent_orange),\n            type = 'bar', text = ~sprintf(\"%.1f%%\", percent), textposition = 'auto') %>%\n      layout(\n        barmode = 'group',\n        yaxis = list(title = \"Percentage\", range = c(0, 100)),\n        xaxis = list(title = \"Purpose\"),\n        legend = list(title = list(text = \"\"), x = 0.01, y = 0.99)\n      )\n  })\n  \n  # Geographic plots\n  output$cluster_farmers <- renderPlotly({\n    req(filtered_df())\n    \n    df <- filtered_df() %>%\n      group_by(cluster) %>%\n      summarise(farmers = n(), .groups = 'drop') %>%\n      filter(!is.na(cluster))\n    \n    if (nrow(df) == 0) {\n      return(plotly_empty(\"No cluster data available.\"))\n    }\n    \n    plot_ly(df, x = ~reorder(cluster, farmers), y = ~farmers, \n            type = 'bar', marker = list(color = secondary_green)) %>%\n      layout(xaxis = list(title = \"Cluster\"), yaxis = list(title = \"Number of Farmers\"))\n  })\n  \n  output$cluster_seedlings <- renderPlotly({\n    req(filtered_df())\n    \n    df <- filtered_df() %>%\n      group_by(cluster) %>%\n      summarise(avg_seedlings = mean(total_seedling, na.rm = TRUE), .groups = 'drop') %>%\n      filter(!is.na(cluster))\n    \n    if (nrow(df) == 0) {\n      return(plotly_empty(\"No cluster data available.\"))\n    }\n    \n    plot_ly(df, x = ~reorder(cluster, avg_seedlings), y = ~avg_seedlings, \n            type = 'bar', marker = list(color = accent_orange)) %>%\n      layout(xaxis = list(title = \"Cluster\"), yaxis = list(title = \"Average Seedlings per Farmer\"))\n  })\n  \n  output$woreda_plot <- renderPlotly({\n    req(filtered_df())\n    \n    df <- filtered_df() %>%\n      group_by(woreda) %>%\n      summarise(farmers = n(), .groups = 'drop') %>%\n      filter(!is.na(woreda))\n    \n    if (nrow(df) == 0) {\n      return(plotly_empty(\"No woreda data available.\"))\n    }\n    \n    plot_ly(df, x = ~reorder(woreda, farmers), y = ~farmers, \n            type = 'bar', marker = list(color = primary_green)) %>%\n      layout(xaxis = list(title = \"Woreda\"), yaxis = list(title = \"Number of Farmers\"))\n  })\n  \n  # Demographics plots\n  output$age_plot <- renderPlotly({\n    req(filtered_df())\n    df <- filtered_df() %>%\n      filter(!is.na(age), age > 0, age < 120) %>%\n      mutate(age_group = cut(age, \n                           breaks = c(0, 25, 35, 45, 55, Inf), \n                           labels = c(\"Under 25\", \"25-34\", \"35-44\", \"45-54\", \"55+\"),\n                           include.lowest = TRUE)) %>%\n      count(age_group, .drop = FALSE)\n    total <- sum(df$n)\n    df <- df %>% mutate(percent = 100 * n / total)\n    if (nrow(df) == 0 || sum(df$n) == 0) {\n      return(plotly_empty(\"No age data available.\"))\n    }\n    plot_ly(df, x = ~age_group, y = ~percent, type = 'bar',\n            marker = list(color = nature_colors[1:nrow(df)]),\n            text = ~sprintf(\"%.1f%%\", percent), textposition = 'auto') %>%\n      layout(xaxis = list(title = \"Age Group\"), yaxis = list(title = \"Percent of Farmers\", range = c(0, 100)))\n  })\n  \n  output$gender_plot <- renderPlotly({\n    req(filtered_df())\n    \n    df <- filtered_df() %>%\n      filter(!is.na(sex), sex != \"Unknown\") %>%\n      count(sex)\n    \n    if (nrow(df) == 0) {\n      return(plotly_empty(\"No gender data available.\"))\n    }\n    \n    plot_ly(df, labels = ~sex, values = ~n, type = 'pie',\n            marker = list(colors = c(primary_green, accent_orange))) %>%\n      layout(showlegend = TRUE)\n  })\n  \n  output$repeat_plot <- renderPlotly({\n    req(filtered_df())\n    \n    df <- filtered_df() %>%\n      filter(!is.na(repeat_customer), repeat_customer != \"Unknown\") %>%\n      count(repeat_customer)\n    \n    if (nrow(df) == 0) {\n      return(plotly_empty(\"No repeat customer data available.\"))\n    }\n    \n    plot_ly(df, labels = ~repeat_customer, values = ~n, type = 'pie',\n            marker = list(colors = c(accent_blue, warm_red))) %>%\n      layout(showlegend = TRUE)\n  })\n  \n  output$youth_plot <- renderPlotly({\n    req(filtered_df())\n    \n    df <- filtered_df() %>%\n      summarise(\n        `Male Youth` = sum(male_youth_16_35_yrs, na.rm = TRUE),\n        `Female Youth` = sum(female_youth_16_35_yrs, na.rm = TRUE),\n        .groups = 'drop'\n      ) %>%\n      pivot_longer(everything(), names_to = \"Gender\", values_to = \"Count\")\n    \n    if (sum(df$Count) == 0) {\n      return(plotly_empty(\"No youth data available.\"))\n    }\n    \n    plot_ly(df, x = ~Gender, y = ~Count, type = 'bar',\n            marker = list(color = c(accent_blue, accent_purple))) %>%\n      layout(xaxis = list(title = \"Youth Category\"), yaxis = list(title = \"Count\"))\n  })\n  \n  # Tree analysis plots\n  output$tree_cluster_heatmap <- renderPlotly({\n    req(filtered_df())\n    \n    df <- filtered_df() %>%\n      select(cluster, all_of(tree_types)) %>%\n      filter(!is.na(cluster)) %>%\n      pivot_longer(-cluster, names_to = \"tree_type\", values_to = \"count\") %>%\n      group_by(cluster, tree_type) %>%\n      summarise(total_count = sum(count, na.rm = TRUE), .groups = 'drop')\n    \n    if (nrow(df) == 0) {\n      return(plotly_empty(\"No tree-cluster data available.\"))\n    }\n    \n    plot_ly(df, x = ~str_to_title(tree_type), y = ~cluster, z = ~total_count, \n            type = \"heatmap\",\n            colorscale = list(c(0, light_green), c(1, primary_green))) %>%\n      layout(xaxis = list(title = \"Tree Species\"), yaxis = list(title = \"Cluster\"))\n  })\n  \n  # Tables\n  output$tree_stats_table <- DT::renderDataTable({\n    validate(need(filtered_df(), \"No data loaded.\"))\n    df <- filtered_df() %>%\n      select(all_of(tree_types)) %>%\n      pivot_longer(everything(), names_to = \"Tree Type\", values_to = \"count\") %>%\n      group_by(`Tree Type`) %>%\n      summarise(\n        `Total Seedlings` = sum(count, na.rm = TRUE),\n        `Farmers Buying` = sum(count > 0, na.rm = TRUE),\n        `Avg per Farmer` = round(mean(count[count > 0], na.rm = TRUE), 1),\n        `Min per Farmer` = ifelse(sum(count > 0, na.rm = TRUE) > 0, min(count[count > 0], na.rm = TRUE), NA),\n        `Max per Farmer` = ifelse(sum(count > 0, na.rm = TRUE) > 0, max(count[count > 0], na.rm = TRUE), NA),\n        .groups = 'drop'\n      ) %>%\n      mutate(`Tree Type` = str_to_title(`Tree Type`)) %>%\n      arrange(desc(`Total Seedlings`))\n    datatable(df, options = list(pageLength = 10, dom = 'tp'), rownames = FALSE)\n  })\n  \n  # Phone ownership plots\n  output$phone_tree_species <- renderPlotly({\n    req(filtered_df())\n    \n    df <- filtered_df() %>%\n      select(has_phone, all_of(tree_types)) %>%\n      pivot_longer(cols = all_of(tree_types), names_to = \"tree_type\", values_to = \"count\") %>%\n      filter(count > 0) %>%\n      group_by(tree_type, has_phone) %>%\n      summarise(n = n(), .groups = 'drop') %>%\n      group_by(tree_type) %>%\n      mutate(percent = n / sum(n) * 100) %>%\n      filter(has_phone == TRUE)\n    \n    if (nrow(df) == 0) {\n      return(plotly_empty(\"No phone ownership data available.\"))\n    }\n    \n    plot_ly(df, x = ~str_to_title(tree_type), y = ~percent, type = 'bar',\n            marker = list(color = primary_green),\n            text = ~sprintf(\"%.1f%%\", percent), textposition = 'outside') %>%\n      layout(xaxis = list(title = \"Tree Species\"), \n             yaxis = list(title = '% Phone Ownership', range = c(0, 100)))\n  })\n  \n  output$phone_owners_species_table <- DT::renderDataTable({\n    validate(need(filtered_df(), \"No data loaded.\"))\n    # Count for phone owners\n    df_owners <- filtered_df() %>%\n      filter(has_phone) %>%\n      select(all_of(tree_types)) %>%\n      pivot_longer(cols = everything(), names_to = \"Tree Species\", values_to = \"count\") %>%\n      filter(count > 0) %>%\n      group_by(`Tree Species`) %>%\n      summarise(Owners = n(), .groups = 'drop')\n    # Total farmers for each species (owners + non-owners)\n    df_total <- filtered_df() %>%\n      select(all_of(tree_types)) %>%\n      pivot_longer(cols = everything(), names_to = \"Tree Species\", values_to = \"count\") %>%\n      filter(count > 0) %>%\n      group_by(`Tree Species`) %>%\n      summarise(TotalFarmers = n(), .groups = 'drop')\n    df <- left_join(df_owners, df_total, by = \"Tree Species\") %>%\n      mutate(`Tree Species` = str_to_title(`Tree Species`)) %>%\n      arrange(desc(Owners))\n    datatable(df, options = list(pageLength = 5, dom = 'tp'), rownames = FALSE)\n  })\n  \noutput$phone_avg_seedlings_table <- DT::renderDataTable({\n  validate(need(filtered_df(), \"No data loaded.\"))\n  df <- filtered_df()\n  # For each tree type, calculate avg per farmer for phone owners and non-owners, only for those who took > 0 seedlings\n  results <- lapply(tree_types, function(tree) {\n    df_tree <- df %>% filter(!is.na(.data[[tree]]), .data[[tree]] > 0)\n    avg_non_owner <- df_tree %>% filter(!has_phone) %>% summarise(avg = mean(.data[[tree]], na.rm = TRUE)) %>% pull(avg)\n    avg_owner <- df_tree %>% filter(has_phone) %>% summarise(avg = mean(.data[[tree]], na.rm = TRUE)) %>% pull(avg)\n    tibble(\n      `Tree Species` = str_to_title(tree),\n      `Non-Owner` = round(avg_non_owner, 2),\n      `Phone Owner` = round(avg_owner, 2),\n      `Difference` = round((avg_owner - avg_non_owner), 2)\n    )\n  })\n  df_out <- bind_rows(results)\n  datatable(df_out, options = list(pageLength = 10, dom = 'tp'), rownames = FALSE)\n})\n}\n\n# ---- Run Application ----\nshinyApp(ui = ui, server = server)","type":"text"}]
